AWSTemplateFormatVersion: '2010-09-09'
Description: Outbound from the On-premises Environment
#----------------------------------------------
Parameters:
  Environment:
    Type: String
    Default: Dev
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    ConstraintDescription: Can contain only ASCII characters.
  #------------------
  InternetAccess:
    Description: (required)If this vpc is required internet access, InternetAccess is true.
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: Must specify true or false.
  EnableNatGW:
    Description: (required)If you deploy NatGWs, EnableNatGW is true.
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: Must specify true or false.
  #------------------
  VpcInternalDnsName: 
    Description: Route53 Private Hosted zone
    Type: String
    Default: "outbound."
    AllowedPattern: "^([a-z0-9]+(-[a-z0-9]+)*\\.?)+\\.$"
    ConstraintDescription: You can use letters (abc), numbers (123) and dashes/hyphens.
  VpcName:
    Description: Name for the VPC
    Type: String
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    Default: OutboundVPC
    ConstraintDescription: Can contain only ASCII characters.
  VpcCidr:
    Description: CIDR Block for the  VPC
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.1.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.0.0/16
  DnsSupport:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  DnsHostnames:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
  #---
  PublicSubnet1Name:
    Description: Name for the Public Subnet 1
    Type: String
    Default: PublicSub1
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    ConstraintDescription: Can contain only ASCII characters.
  PublicSubnet1Cidr:
    Description: CIDR Block for the  pubulic subnet 1
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.1.64.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.1.0/24
  #---
  PublicSubnet2Name:
    Description: Name for the Public Subnet 2
    Type: String
    Default: PublicSub2
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    ConstraintDescription: Can contain only ASCII characters.
  PublicSubnet2Cidr:
    Description: CIDR Block for the  pubulic subnet 2
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.1.128.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.1.0/24
  #---
  PrivateSubnet1Name:
    Description: Name for the Private Subnet 1
    Type: String
    Default: PrivateSub1
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    ConstraintDescription: Can contain only ASCII characters.
  PrivateSubnet1Cidr:
    Description: CIDR Block for the  private subnet 1
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.1.160.0/19
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.1.0/24
  #---
  PrivateSubnet2Name:
    Description: Name for the Private Subnet 2
    Type: String
    Default: PrivateSub2
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    ConstraintDescription: Can contain only ASCII characters.
  PrivateSubnet2Cidr:
    Description: CIDR Block for the  private subnet 2
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.1.192.0/19
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.1.0/24
  #---
  VpnSubnet1Name:
    Description: Name for the Vpn Subnet 1
    Type: String
    Default: VpnSub1
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    ConstraintDescription: Can contain only ASCII characters.
  VpnSubnet1Cidr:
    Description: CIDR Block for the Vpn subnet 1
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.1.80.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.1.0/24
  #---
  VpnSubnet2Name:
    Description: Name for the Vpn Subnet 2
    Type: String
    Default: VpnSub2
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    ConstraintDescription: Can contain only ASCII characters.
  VpnSubnet2Cidr:
    Description: CIDR Block for the Vpn subnet 2
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.1.144.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.1.0/24
  #---
  ResolverInboundIp1:
    Description: 1st IP address for Route53 resolver Inbound eni(Private subnet-1)
    Type: String
    MinLength: 7
    MaxLength: 15
    Default: 10.1.187.90
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"
    ConstraintDescription: Must be like 10.1.1.1
  ResolverInboundIp2:
    Description: 2nd IP address for Route53 resolver Inbound eni(Private subnet-2)
    Type: String
    MinLength: 7
    MaxLength: 15
    Default: 10.1.207.134
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"
    ConstraintDescription: Must be like 10.1.1.1
  #---
  KeyName:
    Description: (required) Name of an existing EC2 key pair
    Type: "AWS::EC2::KeyPair::KeyName"
  ProxyInstanceType: 
    Type: String 
    ConstraintDescription : "Must be a valid EC2 instance type" 
    Default: m5.large 
    AllowedValues: 
      - t2.micro 
      - t2.small 
      - t2.medium 
      - t2.large 
      - t2.xlarge 
      - t2.2xlarge 
      - m5.large 
      - m5.xlarge 
      - m5.2xlarge 
      - m5.4xlarge 
      - m5.12xlarge 
      - m5.24xlarge 
  ProxyAmiId:
    Description: (required) AMI ID
    Type: String
    Default: ami-0f9ae750e8274075b  #for Tokyo-region
    #Default: ami-0b419c3a4b01d1859  #for singapore-region
  ProxyAutoRecoveryMinutes:
    Description: (optional) Auto Recovery Time(Minutes)
    Default: 1
    Type: Number
  #---
  RouterInstanceType:
    Description: (required) Instance type
    Type: String
    Default: m4.xlarge
  RouterAmiId:
    Description: (required) AMI ID
    Type: String
    Default: ami-918470f7  # VyOS 1.1.7 by higebu in Tokyo-region
  RouterIpAddress1:
    Description: Private IP address for Router Instance
    Type: String
    MinLength: 7
    MaxLength: 15
    Default: '10.1.80.200'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"
    ConstraintDescription: Must be like 10.1.1.1
  RouterIpAddress2:
    Description: Private IP address for Router Instance
    Type: String
    MinLength: 7
    MaxLength: 15
    Default: '10.1.144.200'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"
    ConstraintDescription: Must be like 10.1.1.1
  RouterAutoRecoveryMinutes:
    Description: (optional) Auto Recovery Time(Minutes)
    Default: 1
    Type: Number
  DestinationCidr1:
    Description: CIDR Block for Destination
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 172.16.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.1.0/24
  #------------------
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      -
        Label:
          default: "General Configurations"
        Parameters:
          - Environment
      -
        Label:
          default: "VPC Configurations"
        Parameters:
          - InternetAccess
          - EnableNatGW
          - VpcInternalDnsName
          - VpcName
          - VpcCidr
          - DnsSupport
          - DnsHostnames
      -
        Label:
          default: "Subnets Configurations"
        Parameters:
          - PublicSubnet1Name
          - PublicSubnet1Cidr
          - PublicSubnet2Name
          - PublicSubnet2Cidr
          - PrivateSubnet1Name
          - PrivateSubnet1Cidr
          - PrivateSubnet2Name
          - PrivateSubnet2Cidr
          - VpnSubnet1Name
          - VpnSubnet1Cidr
          - VpnSubnet2Name
          - VpnSubnet2Cidr
      -
        Label:
          default: "Rote53 resolver Configurations"
        Parameters:
          -  ResolverInboundIp1
          -  ResolverInboundIp2
      -
        Label:
          default: "Forward Proxy Configurations"
        Parameters:
          - KeyName
          - ProxyInstanceType
          - ProxyAmiId
          - ProxyAutoRecoveryMinutes
      -
        Label:
          default: "CustomerGW(Vyatta) Configurations"
        Parameters:
          - RouterInstanceType
          - RouterAmiId
          - RouterIpAddress1
          - RouterIpAddress2
          - RouterAutoRecoveryMinutes
#----------------------------------------------
Conditions: 
  CheckInternetAccess: !Equals [ !Ref InternetAccess, true ]
  CreateNatGWs: !And [ !Equals [ !Ref InternetAccess, true ], !Equals [ !Ref EnableNatGW, true ] ]
#----------------------------------------------
Resources:
  #------------------ VPC FlowLog Role
  FlowlogRole:
    Type: "AWS::IAM::Role"
    Properties: 
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: "Flowlog"
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                Resource: "*"
  #------------------ VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: !Ref DnsSupport
      EnableDnsHostnames: !Ref DnsHostnames
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}
  #------------------ Internet GW
  Igw:
    Type: AWS::EC2::InternetGateway
    Condition: CheckInternetAccess
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-IGW
  AttachIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CheckInternetAccess
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref Vpc
    DependsOn:
      - Vpc
      - Igw
  #------------------ Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet1Cidr
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch:
        Fn::If:
          - CheckInternetAccess
          - true
          - false
      Tags:
        - Key: Name
          Value: !Sub ${PublicSubnet1Name}
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet2Cidr
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch:
        Fn::If:
          - CheckInternetAccess
          - true
          - false
      Tags:
        - Key: Name
          Value: !Sub ${PublicSubnet2Name}
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet1Cidr
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PrivateSubnet1Name}
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet2Cidr
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${PrivateSubnet2Name}
  VpnSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref VpnSubnet1Cidr
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VpnSubnet1Name}
  VpnSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref VpnSubnet2Cidr
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${VpnSubnet2Name}
  #------------------ Nat GW
  NatGw1:
    Type: AWS::EC2::NatGateway
    Condition: CreateNatGWs
    DependsOn: AttachIgw
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EipNatGw1
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-NatGW1
  EipNatGw1:
    Type: AWS::EC2::EIP
    Condition: CreateNatGWs
    Properties:
      Domain: vpc
  NatGw2:
    Type: AWS::EC2::NatGateway
    Condition: CreateNatGWs
    DependsOn: AttachIgw
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EipNatGw2
        - AllocationId
      SubnetId:
        Ref: PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-NatGW2
  EipNatGw2:
    Type: AWS::EC2::EIP
    Condition: CreateNatGWs
    Properties:
      Domain: vpc
  #------------------ Route Table
  #----------  VPC Public Route Table
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-PubSubRouteTable
  VpcInternetRote:
    Type: AWS::EC2::Route
    Condition: CheckInternetAccess
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw
  #----
  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-PrivateSubRouteTable1
  VpcNatGw1Rote:
    Type: AWS::EC2::Route
    Condition: CreateNatGWs
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGw1
  #----
  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-PrivateSubRouteTable2
  VpcNatGw2Rote:
    Type: AWS::EC2::Route
    Condition: CreateNatGWs
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGw2
  #----
  VpnSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-VpnSubRouteTable1
  AddVpcNatGw1RoteToVpnSubRouteTable:
    Type: AWS::EC2::Route
    Condition: CreateNatGWs
    Properties:
      RouteTableId: !Ref VpnSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGw1
  #----
  VpnSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-VpnSubRouteTable2
  AddVpcNatGw2RoteToVpnSubRouteTable:
    Type: AWS::EC2::Route
    Condition: CreateNatGWs
    Properties:
      RouteTableId: !Ref VpnSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGw2
  #---- Attache to subnets in the  VPC
  PublicSubnetRouteTableAssociationPublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnetRouteTableAssociationPublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable
  PrivateSubnet1RouteTableAssociationPrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateSubnet1RouteTable 
  PrivateSubnet2RouteTableAssociationPrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateSubnet2RouteTable
  VpnSubnet1RouteTableAssociationVpnSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpnSubnet1
      RouteTableId: !Ref VpnSubnet1RouteTable 
  VpnSubnet2RouteTableAssociationVPnSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpnSubnet2
      RouteTableId: !Ref VpnSubnet2RouteTable
  #------------------ Local Domain Name
  VpcInternalDns:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: "Resource DNS for  VPC"
      Name: !Ref VpcInternalDnsName
      VPCs:
        - VPCId: !Ref Vpc
          VPCRegion: !Ref AWS::Region
  #------------------ Cloudwatch log for Flowlog
  VPCFlowlog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowlogRole.Arn
      LogGroupName: !Sub VPCFlowLogs/${VpcName}
      ResourceId: !Ref Vpc
      ResourceType: VPC
      TrafficType: ALL
  #------------------VPC Endpoint
  VpcEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-VPCEndpointSecurityGroup
      GroupDescription: Allow https access from within the Outbound VPC
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !GetAtt Vpc.CidrBlock
  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref PrivateSubnet1RouteTable
        - !Ref PrivateSubnet2RouteTable
        - !Ref VpnSubnet1RouteTable
        - !Ref VpnSubnet2RouteTable
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:*'
            Resource:
              # Allow connections to the Amazon Linux yum repositories
              - "arn:aws:s3:::packages.*.amazonaws.com/*"
              - "arn:aws:s3:::repo.*.amazonaws.com/*"
              # Allow connections to the Amazon Linux2 yum repositories
              - "arn:aws:s3:::amazonlinux.*.amazonaws.com/*"
              # Allow connections to s3 buckets for CloudFormation custom resource request or a wait condition
              - !Sub "arn:aws:s3:::cloudformation-custom-resource-response-${AWS::Region}"   # allow trafic to buckes
              - !Sub "arn:aws:s3:::cloudformation-custom-resource-response-${AWS::Region}/*" # allow trafic to buckes
              - !Sub "arn:aws:s3:::cloudformation-waitcondition-${AWS::Region}"              # waiting condition
              - !Sub "arn:aws:s3:::cloudformation-waitcondition-${AWS::Region}/*"            # waiting condition
  CloudWatchLogEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      PrivateDnsEnabled: yes
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSG
  CloudFormationEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.cloudformation
      VpcEndpointType: Interface
      PrivateDnsEnabled: yes
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSG
  #------------------ Route53 resolver
  Route53ResolverSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-Route53ResolverSecurityGroup
      GroupDescription: Allow DNS access by UDP and TCP. 
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        -
          IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        -
          IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-Route53ResolverSecurityGroup
  Route53ResolverInbound:
    Type: AWS::Route53Resolver::ResolverEndpoint
    Properties:
      Name: OutboundVPCRoute53Resolver-Inbound
      Direction: INBOUND
      IpAddresses: 
        -
          Ip: !Ref ResolverInboundIp1
          SubnetId: !Ref PrivateSubnet1
        -
          Ip: !Ref ResolverInboundIp2
          SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds: 
        - !Ref Route53ResolverSG
      Tags: 
        - Key: Name
          Value: !Sub ${Environment}-OutboundVPCRoute53Resolver-Inbound
  #------------------ VInstance #Vyatta
  RouterSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-RouterInstancesSecurityGroup
      GroupDescription: Allow ALL TCP and UDP traffics. 
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref DestinationCidr1
        -
          IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref DestinationCidr1
        -
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref DestinationCidr1
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref DestinationCidr1
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-RouterInstancesSecurityGroup
  RouterInstanceLunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: RouterInstanceLunchTemplate
      LaunchTemplateData:
        ImageId: !Ref RouterAmiId
        InstanceType: !Ref RouterInstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref RouterSG
        Monitoring:
          Enabled: true
        TagSpecifications:
          -
            ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${Environment}-Router1
              - Key: Environment
                Value: !Ref Environment
  #------------------
  RouterInstance1: 
    Type: AWS::EC2::Instance 
    Properties:
      LaunchTemplate:
        LaunchTemplateName: RouterInstanceLunchTemplate
        Version: !GetAtt RouterInstanceLunchTemplate.LatestVersionNumber
      SubnetId: !Ref VpnSubnet1
      PrivateIpAddress: !Ref RouterIpAddress1
      SourceDestCheck: false
  RecoveryAlarmRouterInstance1: 
    Type: AWS::CloudWatch::Alarm 
    Properties: 
      AlarmDescription: !Sub "Trigger a Auto recovery for RouterInstance1 when instance status check fails for ${RouterAutoRecoveryMinutes} consecutive minutes." 
      Namespace: AWS/EC2 
      MetricName: StatusCheckFailed_System 
      Statistic: Minimum 
      Period: 60 
      EvaluationPeriods: !Ref RouterAutoRecoveryMinutes 
      ComparisonOperator: GreaterThanThreshold 
      Threshold: 0 
      AlarmActions: 
      - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover" 
      - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:admin" 
      Dimensions: 
      - Name: InstanceId 
        Value: !Ref RouterInstance1 
    DependsOn: RouterInstance1
  AddRouteRouterInstanceToPublicSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: !Ref DestinationCidr1
      InstanceId: !Ref RouterInstance1
  AddRouteRouterInstanceToPPrivateSubnet1Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: !Ref DestinationCidr1
      InstanceId: !Ref RouterInstance1
  AddRouteRouterInstanceToPPrivateSubnet2Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: !Ref DestinationCidr1
      InstanceId: !Ref RouterInstance1
  #------------------ Forward Proxy
  ProxyNLBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-ProxyForNlbSecurityGroup
      GroupDescription: Allow Proxy inbound access
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 3128
          ToPort: 3128
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: !Sub ${Environment}-ProxyForNlbSecurityGroup
  ProxyInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-ProxyForTargetSecurityGroup
      GroupDescription: Allow Proxy inbound access
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 3128
          ToPort: 3128
          CidrIp: !Ref PrivateSubnet1Cidr
        -
          IpProtocol: tcp
          FromPort: 3128
          ToPort: 3128
          CidrIp: !Ref PrivateSubnet2Cidr
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: !Sub ${Environment}-ProxyForTargetSecurityGroup
  #------------------
  ProxyLunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: FowardProxyLunchTemplate
      LaunchTemplateData:
        ImageId: !Ref ProxyAmiId
        InstanceType: !Ref ProxyInstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref ProxyInstanceSG
        Monitoring:
          Enabled: true
        TagSpecifications:
          -
            ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${Environment}-ProxyInstance
              - Key: Environment
                Value: !Ref Environment
        UserData:
          Fn::Base64: !Sub | 
            #!/bin/bash -xe
            yum update -y 
            yum install -y aws-cfn-bootstrap cloud-init aws-cli 
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ProxyLunchTemplate --region ${AWS::Region} --configsets proxy_setup
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ProxyLunchTemplate --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init: 
        configSets: 
          proxy_setup:
            - install_squid 
            - setup_squid 
        install_squid: 
          packages: 
            yum: 
              squid: [] 
        setup_squid: 
          files: 
            "/etc/squid/squid.conf": 
              content: !Sub | 
                # define ip address 
                acl localnet src 127.0.0.0/8 
                acl localnet src ::1/128 
 
                acl SSL_ports port 443 
                acl Safe_ports port 443
                acl CONNECT method CONNECT 
                http_access deny !Safe_ports 
 
                # Deny CONNECT to other than secure SSL ports 
                http_access deny CONNECT !SSL_ports 
 
                # Only allow cachemgr access from localhost 
                http_access allow localhost manager 
                http_access deny manager 
 
                # from where browsing should be allowed 
                http_access allow localnet 
 
                # include url white list 
                acl whitelist dstdomain "/etc/squid/whitelist" 
                http_access allow whitelist 
 
                # And finally deny all other access to this proxy 
                http_access deny all 
                #------------------------------------------ 
                http_port 3128

                # Leave coredumps in the first cache dir
                coredump_dir /var/spool/squid
 
                # anonymouse host name
                visible_hostname unknown
              mode: '000640'
              owner: root
              group: squid
            "/etc/squid/whitelist":
              content: !Sub |
                .google.co.jp
                .google.com
                #-----------------------------
                #WorkSpaces: Clinet software install and Auto-update
                #-----------------------------
                #download and auto-update WorkSpaces Clinet
                #clients.amazonworkspaces.com   #(optional)Download site
                d2td7dqidlhjx7.cloudfront.net  #(optional)auto-update
                
                #-----------------------------
                #WorkSpaces: Connectivity Check and Device Metrics
                #-----------------------------
                connectivity.amazonworkspaces.com #(required)Connectivity Check
                device-metrics-us-2.amazon.com    #(optional)Device Metrics
                
                #-----------------------------
                #WorkSpaces: Directory Setting
                #-----------------------------
                #d32i4gd7pg4909.cloudfront.net  #(optional)Authentication from the client to the customer directory before login to the WorkSpace:
                #d21ui22avrxoh6.cloudfront.net  #Customer directory a4g1u.cloudfront.net
                #d1cbg795sa4g1u.cloudfront.net  #Login page graphics for customer directory level co-branding
                d3s98kk2h6f4oh.cloudfront.net   #(optional)CSS file to style the login pages:
                dyqsoz7pkju4e.cloudfront.net    #(optional)CSS file to style the login pages:
                
                #JavaScript file for the login pages(required)
                #d32i4gd7pg4909.cloudfront.net  #US East (N. Virginia)
                #d18af777lco7lp.cloudfront.net  #US West (Oregon)
                #dtyv4uwoh7ynt.cloudfront.net   #Asia Pacific (Seoul)
                d3qzmd7y07pz0i.cloudfront.net   #Asia Pacific (Singapore)
                #dwcpoxuuza83q.cloudfront.net   #dwcpoxuuza83q.cloudfront.net/
                #d2c2t8mxjhq5z1.cloudfront.net  #Asia Pacific (Tokyo)
                
                #-----------------------------
                #WorkSpaces: others
                #-----------------------------
                #fls-na.amazon.com              #(optional)Forrester Log Service
                #s3.amazonaws.com               #(optional)WorkSpacesからのADユーザパワード回復などの連携(認証用画像データ取得用)
                
                #-----------------------------
                #WorkSpaces: user Login Page
                #-----------------------------
                d-96672804ff.awsapps.com  #https://<directory id>.awsapps.com/ (where <directory id> is the customer's domain)

                #-----------------------------
                #WorkSpaces: WorkSpaces WS Broker(required)
                #-----------------------------
                #ws-broker-service.us-east-1.amazonaws.com       #us-east-1
                #ws-broker-service.us-west-2.amazonaws.com       #us-west-2
                ws-broker-service.ap-southeast-1.amazonaws.com  #ap-southeast-1
                #ws-broker-service.ap-southeast-2.amazonaws.com  #ap-southeast-2
                #ws-broker-service.ap-northeast-1.amazonaws.com  #ap-northeast-1
                #ws-broker-service.ap-northeast-2.amazonaws.com  #ap-northeast-2
              mode: '000640'
              owner: root
              group: squid
          services:
            sysvinit:
              squid:
                enabled: true
                ensureRunning: true
                files:
                  - "/etc/squid/squid.conf"
                  - "/etc/squid/whitelist.conf"
  #------------------
  ProxyInstance1: 
    Type: AWS::EC2::Instance 
    Properties:
      LaunchTemplate:
        LaunchTemplateName: FowardProxyLunchTemplate
        Version: !GetAtt ProxyLunchTemplate.LatestVersionNumber
      SubnetId: !Ref PrivateSubnet1
      SourceDestCheck: false
  RecoveryAlarmProxyInstance1: 
    Type: AWS::CloudWatch::Alarm 
    Properties: 
      AlarmDescription: Trigger a Auto recovery when instance status check fails for 5 consecutive minutes. 
      Namespace: AWS/EC2 
      MetricName: StatusCheckFailed_System 
      Statistic: Minimum 
      Period: 60 
      EvaluationPeriods: !Ref ProxyAutoRecoveryMinutes 
      ComparisonOperator: GreaterThanThreshold 
      Threshold: 0 
      AlarmActions: 
      - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover" 
      - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:admin" 
      Dimensions: 
      - Name: InstanceId 
        Value: !Ref ProxyInstance1 
    DependsOn: ProxyInstance1
  #------------------
  ProxyInstance2: 
    Type: AWS::EC2::Instance 
    Properties:
      LaunchTemplate:
        LaunchTemplateName: FowardProxyLunchTemplate
        Version: !GetAtt ProxyLunchTemplate.LatestVersionNumber
      SubnetId: !Ref PrivateSubnet2
      SourceDestCheck: false
  RecoveryAlarmProxyInstance2: 
    Type: AWS::CloudWatch::Alarm 
    Properties: 
      AlarmDescription: Trigger a Auto recovery when instance status check fails for 5 consecutive minutes. 
      Namespace: AWS/EC2 
      MetricName: StatusCheckFailed_System 
      Statistic: Minimum 
      Period: 60 
      EvaluationPeriods: !Ref ProxyAutoRecoveryMinutes 
      ComparisonOperator: GreaterThanThreshold 
      Threshold: 0 
      AlarmActions: 
      - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover" 
      - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:admin" 
      Dimensions: 
      - Name: InstanceId 
        Value: !Ref ProxyInstance2 
    DependsOn: ProxyInstance2
  #------------------ ForwardProxy-NLB
  ProxyNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Proxy-NLB
      Scheme: internal
      Type: network
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: false
        - Key: load_balancing.cross_zone.enabled
          Value: true
      Tags:
        - Key: Name
          Value: Proxy-NLB
        - Key: Environment
          Value: !Ref Environment
  ProxyNLBTarget:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Proxy-target-Group
      Protocol: TCP
      Port: 3128
      VpcId: !Ref Vpc
      #--- Targets
      TargetType: ip
      Targets:
        - Id: !GetAtt ProxyInstance1.PrivateIp
          AvailabilityZone: !Select
            - 0
            - Fn::GetAZs: !Ref 'AWS::Region'
          Port: 3128
        - Id: !GetAtt ProxyInstance2.PrivateIp
          AvailabilityZone: !Select
            - 1
            - Fn::GetAZs: !Ref 'AWS::Region'
          Port: 3128
      #--- health check
      HealthCheckProtocol: TCP
      HealthCheckPort: traffic-port
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      HealthCheckIntervalSeconds: 10
      #--- target group
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 100
        - Key: proxy_protocol_v2.enabled
          Value: false
      Tags:
        - Key: Name
          Value: Proxy-target-Group
        - Key: Environment
          Value: !Ref Environment
  ProxyNLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: TCP
      Port: 3128
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ProxyNLBTarget
      LoadBalancerArn: !Ref ProxyNLB
Outputs:
  #------------------ VPC
  VpcId:
    Description:  VPC ID
    Value: !Ref Vpc
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"
  VpcCidr:
    Description:  VPC CIDR
    Value: !Ref VpcCidr
    Export:
      Name: !Sub "${AWS::StackName}-VpcCidr"
  #------------------ Subnet
  PublicSubnet1Id:
    Description: Public Subnet1 ID in the  VPC
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1Id"
  PublicSubnet2Id:
    Description: Public Subnet2 ID in the  VPC
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2Id"
  PrivateSubnet1Id:
    Description: Private Subnet1 ID in the  VPC
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1Id"
  PrivateSubnet2Id:
    Description: Private Subnet2 ID in the  VPC
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2Id"
  VpnSubnet1Id:
    Description: Private VpnSubnet1 ID in the  VPC
    Value: !Ref VpnSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-VpnSubnet1Id"
  VpnSubnet2Id:
    Description: Private VpnSubnet2 ID in the  VPC
    Value: !Ref VpnSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-VpnSubnet2Id"
  #------------------ route tables
  PublicSubnetRouteTableId:
    Description: Route table for Public Subnet
    Value: !Ref PublicSubnetRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetRouteTableId"
  PrivateSubnet1RouteTableId:
    Description: Route table for Private Subnet1
    Value: !Ref PrivateSubnet1RouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1RouteTableId"
  PrivateSubnet2RouteTableId:
    Description: Route table for Private Subnet2
    Value: !Ref PrivateSubnet2RouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2RouteTableId"
  VpnSubnet1RouteTableId:
    Description: Route table for VpnSubnet1
    Value: !Ref VpnSubnet1RouteTable
    Export:
      Name: !Sub "${AWS::StackName}-VpnSubnet1RouteTableId"
  VpnSubnet2RouteTableId:
    Description: Route table for VpnSubnet2
    Value: !Ref VpnSubnet2RouteTable
    Export:
      Name: !Sub "${AWS::StackName}-VpnSubnet2RouteTableId"
  #------------------ Resource DNS name
  VpcInternalDnsName:
    Description: Resource DNS zone name in the  Vpc
    Value: !Ref VpcInternalDnsName
    Export:
      Name: !Sub ${AWS::StackName}-VpcInternalDnsName
  VpcInternalDnsId:
    Description: Resource DNS zone id in the  VPC
    Value: !Ref VpcInternalDns
    Export:
      Name: !Sub ${AWS::StackName}-VpcInternalDnsId
  #------------------ Route53 resolver
  ResolverInboundIp1:
    Description: 1st IP address for Route53 resolver Inbound eni(Private subnet-1)
    Value: !Ref ResolverInboundIp1
    Export:
      Name: !Sub ${AWS::StackName}-ResolverInboundIp1
  ResolverInboundIp2:
    Description: 2nd IP address for Route53 resolver Inbound eni(Private subnet-2)
    Value: !Ref ResolverInboundIp2
    Export:
      Name: !Sub ${AWS::StackName}-ResolverInboundIp2
  #------------------ Proxy 
  ProxyNLBDns:
    Description: Proxy NLB Listner DNS
    Value: !GetAtt ProxyNLB.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-ProxyNLBDns"
  ProxyInstance1Id:
    Description: Proxy1 ID
    Value: !Ref ProxyInstance1
    Export:
      Name: !Sub "${AWS::StackName}-ProxyInstance1Id"
  ProxyInstance1PrivateIP:
    Description: BastionWindows PrivateIP
    Value: !GetAtt ProxyInstance1.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-ProxyInstance1PrivateIP"
  ProxyInstance2Id:
    Description: Proxy1 ID
    Value: !Ref ProxyInstance2
    Export:
      Name: !Sub "${AWS::StackName}-ProxyInstance2Id"
  ProxyInstance2PrivateIP:
    Description: BastionWindows PrivateIP
    Value: !GetAtt ProxyInstance2.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-ProxyInstance2PrivateIP"