AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a Client VPC(Emulate On-premises environment)
#----------------------------------------------
Parameters:
  Environment:
    Type: String
    Default: Dev
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    ConstraintDescription: Can contain only ASCII characters.
  #------------------
  InternetAccess:
    Description: (required)If this vpc is required internet access, InternetAccess is true.
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: Must specify true or false.
  #------------------
  VpcInternalDnsName: 
    Type: String
    Default: "client."
    AllowedPattern: "^([a-z0-9]+(-[a-z0-9]+)*\\.?)+\\.$"
    ConstraintDescription: You can use letters (abc), numbers (123) and dashes/hyphens, and the last character is '.'.
  VpcName:
    Description: Name for the VPC
    Type: String
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    Default: ClientVPC
    ConstraintDescription: Can contain only ASCII characters.
  VpcCidr:
    Description: CIDR Block for the  VPC
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 172.16.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.0.0/16
  DnsSupport:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  DnsHostnames:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  #---
  Subnet1Name:
    Description: Name for the Public Subnet 1
    Type: String
    Default: PublicSub1
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    ConstraintDescription: Can contain only ASCII characters.
  Subnet1Cidr:
    Description: CIDR Block for the  pubulic subnet 1
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 172.16.1.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.1.0/24
  #---
  Subnet2Name:
    Description: Name for the Public Subnet 2
    Type: String
    Default: PublicSub2
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    ConstraintDescription: Can contain only ASCII characters.
  Subnet2Cidr:
    Description: CIDR Block for the  pubulic subnet 2
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 172.16.2.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.1.0/24
  #---
  KeyName:
    Description: (required) Name of an existing EC2 key pair
    Type: "AWS::EC2::KeyPair::KeyName"
  #---
  RdpClientCidr:
    Description: RDP Client CIDR
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 27.0.3.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be like 10.1.1.0/24
  RdpInstanceType:
    Description: (required) Instance type
    Type: String
    Default: t2.micro
  RdpAmiId:
    Description: (required) AMI ID
    Type: String
    Default: ami-0c9fb07d32eacc311
  RdpAutoRecoveryMinutes:
    Description: (optional) Auto Recovery Time(Minutes)
    Default: 1
    Type: Number
  #---
  VyosInstanceType:
    Description: (required) Instance type
    Type: String
    Default: m4.xlarge
  VyosAmiId:
    Description: (required) AMI ID
    Type: String
    Default: ami-0bee8670afa0e1bd0
  VyosIpAddress:
    Description: Private IP address for Router Instance
    Type: String
    MinLength: 7
    MaxLength: 15
    Default: '172.16.1.200'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"
    ConstraintDescription: Must be like 10.1.1.1
  VyosAutoRecoveryMinutes:
    Description: (optional) Auto Recovery Time(Minutes)
    Default: 1
    Type: Number
  #------------------
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      -
        Label:
          default: "General"
        Parameters:
          - Environment
      -
        Label:
          default: "VPC Configurations"
        Parameters:
          - InternetAccess
          - VpcInternalDnsName
          - VpcName
          - VpcCidr
          - DnsSupport
          - DnsHostnames
      -
        Label:
          default: "Subnets Configurations"
        Parameters:
          - Subnet1Name
          - Subnet1Cidr
          - Subnet2Name
          - Subnet2Cidr
      -
        Label:
          default: "Instances common Configurations"
        Parameters:
          - KeyName
      -
        Label:
          default: "RDP Client Configurations"
        Parameters:
          - RdpClientCidr
          - RdpInstanceType
          - RdpAmiId
          - VyosIpAddress
          - RdpAutoRecoveryMinutes
      -
        Label:
          default: "CustomerGW(vyos) Configurations"
        Parameters:
          - VyosInstanceType
          - VyosAmiId
          - VyosAutoRecoveryMinutes
#----------------------------------------------
Conditions: 
  CheckInternetAccess: !Equals [ !Ref InternetAccess, true ]
  CheckRdpAutoRecovery: !Not [!Equals [!Ref RdpAutoRecoveryMinutes, 0 ]]
  CheckVyosAutoRecovery: !Not [!Equals [!Ref VyosAutoRecoveryMinutes, 0 ]]
#----------------------------------------------
Resources:
  #------------------ VPC FlowLog Role
  FlowlogRole:
    Type: "AWS::IAM::Role"
    Properties: 
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: "Flowlog"
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                Resource: "*"
  #------------------ VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: !Ref DnsSupport
      EnableDnsHostnames: !Ref DnsHostnames
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}
  VpcDhcpOption:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainNameServers:
        - Fn::ImportValue: !Sub ${Environment}-OutboundVPC-ResolverInboundIp1
        - Fn::ImportValue: !Sub ${Environment}-OutboundVPC-ResolverInboundIp2
      NtpServers:
        - 169.254.169.123
  AssociateDhcpToVpc:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties: 
      DhcpOptionsId: !Ref VpcDhcpOption
      VpcId: !Ref Vpc
  #------------------ Internet GW
  Igw:
    Type: AWS::EC2::InternetGateway
    Condition: CheckInternetAccess
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-IGW
  AttachIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CheckInternetAccess
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref Vpc
    DependsOn:
      - Vpc
      - Igw
  #------------------ Subnet
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Subnet1Cidr
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch:
        Fn::If:
          - CheckInternetAccess
          - true
          - false
      Tags:
        - Key: Name
          Value: !Sub ${Subnet1Name}
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref Subnet2Cidr
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch:
        Fn::If:
          - CheckInternetAccess
          - true
          - false
      Tags:
        - Key: Name
          Value: !Sub ${Subnet2Name}
  #------------------ Route Table
  #----------  Route Table for Public subnet-1
  RouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-RouteTable1
  VpcInternetRote1:
    Type: AWS::EC2::Route
    Condition: CheckInternetAccess
    Properties:
      RouteTableId: !Ref RouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref Igw
  #----------  Route Table for Public subnet-2
  RouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-RouteTable2
  VpcInternetRote2:
    Type: AWS::EC2::Route
    Condition: CheckInternetAccess
    Properties:
      RouteTableId: !Ref RouteTable2
      DestinationCidrBlock: !Ref RdpClientCidr
      GatewayId: !Ref Igw
  #---- Attache to subnets in the  VPC
  RouteTableAssociationSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable1
  RouteTableAssociationSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable2
    DependsOn:
      - AttachIgw
  #------------------ Local Domain Name
  VpcInternalDns:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: "Resource DNS for  VPC"
      Name: !Ref VpcInternalDnsName
      VPCs:
        - VPCId: !Ref Vpc
          VPCRegion: !Ref AWS::Region
  #------------------ Cloudwatch log for Flowlog
  VPCFlowlog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowlogRole.Arn
      LogGroupName: !Sub VPCFlowLogs/${VpcName}
      ResourceId: !Ref Vpc
      ResourceType: VPC
      TrafficType: ALL
  #------------------ Security Group
  WksClientSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-WorkspacesClientSecurityGroup
      GroupDescription: Allow RDP. 
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref RdpClientCidr
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref RdpClientCidr
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-WorkspacesClientSecurityGroup
  CustomerGwSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-CustomerGatewaySecurityGroup
      GroupDescription: Allow ALL TCP and UDP traffics. 
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref Subnet2Cidr
        -
          IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref Subnet2Cidr
        -
          IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref Subnet2Cidr
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref RdpClientCidr
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-CustomerGatewaySecurityGroup
  #------------------ Instance #bastion(Linux)
  WorkspacesClient:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub ${RdpAmiId}
      InstanceType: !Sub ${RdpInstanceType}
      Monitoring: yes
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId: !Ref Subnet2
          GroupSet:
            - !Ref WksClientSG
      Tags:
        - Key: Name
          Value: WorkspacesClient
  WorkspacesClientRecoveryAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CheckRdpAutoRecovery
    Properties:
      AlarmDescription: AutoRecovery for the WorkspacesClient.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: !Ref RdpAutoRecoveryMinutes
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
      - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:admin"
      Dimensions:
      - Name: InstanceId
        Value: !Ref WorkspacesClient
    DependsOn: WorkspacesClient
  #------------------ Instance #bastion(Linux)
  BastionLinux:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0f9ae750e8274075b
      InstanceType: !Sub ${RdpInstanceType}
      Monitoring: yes
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId: !Ref Subnet2
          GroupSet:
            - !Ref WksClientSG
      Tags:
        - Key: "Name"
          Value: "BastionLinux"
  BastionLinuxRecoveryAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CheckRdpAutoRecovery
    Properties:
      AlarmDescription: AutoRecovery for the WorkspacesClient.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: !Ref RdpAutoRecoveryMinutes
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
      - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:admin"
      Dimensions:
      - Name: InstanceId
        Value: !Ref BastionLinux
    DependsOn: BastionLinux
  #------------------ VInstance #vyos
  CustomerGw:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub ${VyosAmiId}
      InstanceType: !Sub ${VyosInstanceType}
      SourceDestCheck: false
      Monitoring: yes
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId: !Ref Subnet1
          PrivateIpAddress: !Ref VyosIpAddress
          GroupSet:
            - !Ref CustomerGwSG
      Tags:
        - Key: Name
          Value: CustomerGW
  CustomerGwRecoveryAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CheckVyosAutoRecovery
    Properties:
      AlarmDescription: AutoRecovery for the WorkspacesClient.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: !Ref VyosAutoRecoveryMinutes
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
      - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:admin"
      Dimensions:
      - Name: InstanceId
        Value: !Ref CustomerGw
    DependsOn: CustomerGw
  CustomerGWRote:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref CustomerGw
Outputs:
  #------------------ VPC
  VpcId:
    Description:  VPC ID
    Value: !Ref Vpc
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"
  VpcCidr:
    Description:  VPC CIDR
    Value: !Ref VpcCidr
    Export:
      Name: !Sub "${AWS::StackName}-VpcCidr"
  #------------------ Subnet
  Subnet1Id:
    Description: Public Subnet1 ID in the  VPC
    Value: !Ref Subnet1
    Export:
      Name: !Sub "${AWS::StackName}-Subnet1Id"
  Subnet2Id:
    Description: Public Subnet2 ID in the  VPC
    Value: !Ref Subnet2
    Export:
      Name: !Sub "${AWS::StackName}-Subnet2Id"
  #------------------ route tables
  RouteTable1Id:
    Description: Route table1 for Public Subnet
    Value: !Ref RouteTable1
    Export:
      Name: !Sub "${AWS::StackName}-RouteTable1Id"
  RouteTable2Id:
    Description: Route table2 for Public Subnet
    Value: !Ref RouteTable2
    Export:
      Name: !Sub "${AWS::StackName}-RouteTable2Id"
  #------------------ Resource DNS name
  VpcInternalDnsName:
    Description: Resource DNS zone name in the  Vpc
    Value: !Ref VpcInternalDnsName
    Export:
      Name: !Sub ${AWS::StackName}-VpcInternalDnsName
  VpcInternalDnsId:
    Description: Resource DNS zone id in the  VPC
    Value: !Ref VpcInternalDns
    Export:
      Name: !Sub ${AWS::StackName}-VpcInternalDnsId
  #------------------ CustomerGW
  CustomerGWPublicIP:
    Description: CustomerGW Public IP
    Value: !GetAtt CustomerGw.PublicIp 
    Export:
      Name: !Sub ${AWS::StackName}-CustomerGWPublicIP
  CustomerGwId:
    Description: CustomerGW ID
    Value: !Ref CustomerGw
    Export:
      Name: !Sub ${AWS::StackName}-CustomerGwId
  #------------------ Bastion and WorkSpaces Clinet
  BastionLinuxuPublicIP:
    Description: BastionLinux Public IP
    Value: !GetAtt BastionLinux.PublicIp 
    Export:
      Name: !Sub ${AWS::StackName}-BastionLinuxPublicIP
  WorkspacesClientPublicIP:
    Description: BastionLinux Public IP
    Value: !GetAtt WorkspacesClient.PublicIp 
    Export:
      Name: !Sub ${AWS::StackName}-WorkspacesClientPublicIP